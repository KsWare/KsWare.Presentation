<!-- 
Description:
	This file provides default styles for the ViewModel
	
Usage:
	Include this file in App.xml

Example:
	<Application x:Class="KsWare.KoCHelper.App"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		StartupUri="Window.xaml">
		<Application.Resources>
			 <ResourceDictionary>
				 <ResourceDictionary.MergedDictionaries>
Include =>			 <ResourceDictionary Source="pack://application:,,,/KsWare.Presentation.ViewFramework;component/Resources/ViewModelStyles.xaml"/>
				 </ResourceDictionary.MergedDictionaries>
			 </ResourceDictionary>
		</Application.Resources>
	</Application>	
	
-->
	
<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:ab="clr-namespace:KsWare.Presentation.ViewFramework.AttachedBehavior" 
	xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework" 
	>
	<!-- xmlns:ab="clr-namespace:KsWare.Presentation.ViewFramework.AttachedBehavior;assembly=OSIS.UI"  -->
	
	<!-- Style for Multiline Label (TextBox) / ObjectVM -->
	<Style x:Key="PropertyLabel" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}" >
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="TextWrapping" Value="Wrap"/>
		<Setter Property="Text" Value="{Binding PropertyLabel, Mode=OneWay}"/>
		<Setter Property="Background" Value="Transparent"/>
	</Style>

	<Style x:Key="ObjectVMPropertyLabelGroupBoxStyle" TargetType="GroupBox" BasedOn="{StaticResource {x:Type GroupBox}}" >
		<Setter Property="Header" Value="{Binding PropertyLabel, Mode=OneWay}"/>
	</Style>

	<!-- Style for TextBox / ValueVM.EditValue -->
	<Style x:Key="ValueVMEditValueTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}" >
		<Setter Property="DockPanel.Dock" Value="Right"/>
		<Setter Property="MinWidth" Value="50"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Text" Value="{Binding EditValueProvider.String, Mode=TwoWay}"/>
		<Style.Triggers>
			<!--DataTrigger Binding="{Binding ErrorProvider.HasError}" Value="True">
				<Setter Property="BorderThickness" Value="3 1 1 1"/>
				<Setter Property="BorderBrush" Value="Red"/>
				<Setter Property="ToolTip" Value="{Binding ErrorProvider.ErrorMessage}"/>
			</DataTrigger-->
		</Style.Triggers>
	</Style>

	<!-- Style for TextBox / ValueVM.EditValue -->
	<Style x:Key="ValueVMDisplayValueTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}" >
		<Setter Property="DockPanel.Dock" Value="Right"/>
		<Setter Property="MinWidth" Value="50"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Text" Value="{Binding EditValueProvider.String, Mode=OneWay}"/>
		<Style.Triggers>
			<DataTrigger Binding="{Binding ErrorProvider.HasError}" Value="True">
				<Setter Property="BorderThickness" Value="3 1 1 1"/>
				<Setter Property="BorderBrush" Value="Red"/>
				<Setter Property="ToolTip" Value="{Binding ErrorProvider.ErrorMessage}"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<!-- Style for TextBox / ValueVM.EditValue -->
	<Style x:Key="ValueVMEditValueDatePickerStyle" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource {x:Type DatePicker}}" >
		<Setter Property="DockPanel.Dock" Value="Right"/>
		<Setter Property="MinWidth" Value="50"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Text" Value="{Binding EditValueProvider.String, Mode=TwoWay}"/>
		<!--Setter Property="DisplayDate" Value="{Binding Value, Mode=TwoWay}"/-->
		<Style.Triggers>
			<!--DataTrigger Binding="{Binding ErrorProvider.HasError}" Value="True">
				<Setter Property="BorderThickness" Value="3 1 1 1"/>
				<Setter Property="BorderBrush" Value="Red"/>
				<Setter Property="ToolTip" Value="{Binding ErrorProvider.ErrorMessage}"/>
			</DataTrigger-->
		</Style.Triggers>
	</Style>
	

	<!-- Style for ComboBox / EditValueProvider.Value -->
	<Style x:Key="ValueVMComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}" >
		<Setter Property="DockPanel.Dock" Value="Right"/>
		<Setter Property="MinWidth" Value="50"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="SelectedItem" Value="{Binding Value, Mode=TwoWay}"/>
		<Setter Property="ItemsSource" Value="{Binding ValueSourceProvider.SourceList, Mode=OneWay}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Style.Triggers>
			<!--DataTrigger Binding="{Binding ErrorProvider.HasError}" Value="True">
				<Setter Property="BorderThickness" Value="3 1 1 1"/>
				<Setter Property="BorderBrush" Value="Red"/>
				<Setter Property="ToolTip" Value="{Binding ErrorProvider.ErrorMessage}"/>
			</DataTrigger-->
		</Style.Triggers>
	</Style>
	
	<!-- Style for Editable ComboBox / ValueVM.EditValue -->
	<Style x:Key="ValueVMComboBoxEditableStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}" >
		<Setter Property="DockPanel.Dock" Value="Right"/>
		<Setter Property="MinWidth" Value="50"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="IsEditable" Value="True"/>
		<Setter Property="Text" Value="{Binding EditValueProvider.String, Mode=TwoWay}"/>
		<Setter Property="ItemsSource" Value="{Binding ValueSourceProvider.SourceList, Mode=OneWay}"/>
		<Style.Triggers>
			<!--DataTrigger Binding="{Binding ErrorProvider.HasError}" Value="True">
				<Setter Property="BorderThickness" Value="2"/>
				<Setter Property="BorderBrush" Value="Red"/>
				<Setter Property="ToolTip" Value="{Binding ErrorProvider.ErrorMessage}"/>
			</DataTrigger-->
		</Style.Triggers>
	</Style>	
	
	<!-- Style for ComboBox / EnumVM.Value (Enum) -->
	<Style x:Key="EnumVMComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}" >
		<Setter Property="DockPanel.Dock" Value="Right"/>
		<Setter Property="MinWidth" Value="50"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="DisplayMemberPath" Value="DisplayValueProvider.Value"/>
		<Setter Property="SelectedValuePath" Value="Value"/>
		<Setter Property="SelectedValue" Value="{Binding Value, Mode=TwoWay}"/>
		<Setter Property="ItemsSource" Value="{Binding ValueSourceProvider.SourceList, Mode=OneWay}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Style.Triggers>
			<!--DataTrigger Binding="{Binding ErrorProvider.HasError}" Value="True">
				<Setter Property="BorderThickness" Value="3 1 1 1"/>
				<Setter Property="BorderBrush" Value="Red"/>
				<Setter Property="ToolTip" Value="{Binding ErrorProvider.ErrorMessage}"/>
			</DataTrigger-->
		</Style.Triggers>
	</Style>
	
	<!-- Style for Editable ComboBox / EnumVM.EditValue (Enum) --> <!-- TODO -->
	<Style x:Key="EnumVMComboBoxEditableStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}" >
		<Setter Property="DockPanel.Dock" Value="Right"/>
		<Setter Property="MinWidth" Value="50"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="IsEditable" Value="True"/>
		<Setter Property="Text" Value="{Binding EditValueProvider.String, Mode=TwoWay}"/>
		<Setter Property="ItemsSource" Value="{Binding ValueSourceProvider.SourceList, Mode=OneWay}"/>
		<Style.Triggers>
			<!--DataTrigger Binding="{Binding ErrorProvider.HasError}" Value="True">
				<Setter Property="BorderThickness" Value="2"/>
				<Setter Property="BorderBrush" Value="Red"/>
				<Setter Property="ToolTip" Value="{Binding ErrorProvider.ErrorMessage}"/>
			</DataTrigger-->
		</Style.Triggers>
	</Style>	
	
	<!-- Style for CheckBox / ValueVM.Value -->
	<Style x:Key="ValueVMCheckBoxStyle" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}" >
		<Setter Property="Margin" Value="0 3 0 3"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="IsChecked" Value="{Binding Value, Mode=TwoWay}"/>
		<Setter Property="Content" Value="{Binding PropertyLabel, Mode=OneWay}"/>
		<Style.Triggers>
			<!--DataTrigger Binding="{Binding ErrorProvider.HasError, Mode=OneWay}" Value="True">
				<Setter Property="BorderThickness" Value="2"/>
				<Setter Property="BorderBrush" Value="Red"/>
				<Setter Property="ToolTip" Value="{Binding ErrorProvider.ErrorMessage, Mode=OneWay}"/>
			</DataTrigger-->
		</Style.Triggers>
	</Style>
	

	<!-- Style for Label / ValueVM.PropertyLabel -->
	<Style x:Key="ValueVMHeaderLabelTopStyle" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}" >
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Content" Value="{Binding PropertyLabel, Mode=OneWay}"/>
		<Setter Property="Padding" Value="4 0 4 0"/>
	</Style>
	<Style x:Key="ValueVMHorizontalHeaderLabelLeftStyle" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}" >
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Content" Value="{Binding PropertyLabel, Mode=OneWay}"/>
		
		<!--Setter Property="Padding" Value="4 2 4 2"/-->
	</Style>

	<!-- Style for Label / ValueVM.Unit -->
	<Style x:Key="PropertyUnit" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}" >
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="DockPanel.Dock" Value="Right"/>
		<Setter Property="Content" Value="%"/>
	</Style>
	
	<!-- Style for Button / ActionVM -->
	<Style x:Key="ActionVMButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}" >
		<Setter Property="IsEnabled" Value="{Binding CanExecute}"/>
		<Setter Property="ab:EventBehavior.Event" Value="Click"/>
		<Setter Property="ab:EventBehavior.InvokeMethod" Value="Execute"/>
		<Setter Property="Content" Value="{Binding PropertyLabel}"/>
	</Style>
	
	<!-- Style for Button / ActionVM -->
	<Style x:Key="ActionActiveProgressVMToggleButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}" >
		<Setter Property="IsEnabled"                     Value="{Binding CanExecute}"   />
		<Setter Property="IsChecked"                     Value="{Binding IsActive, Mode=OneWay}"/>
		<Setter Property="ab:EventBehavior.Event"        Value="Click"                  />
		<Setter Property="ab:EventBehavior.InvokeMethod" Value="Execute"                />
		<Setter Property="Content"                       Value="{Binding PropertyLabel}"/>
	</Style>	
	
	<!-- Style for a list of RadioButtons -->
	<Style x:Key="RadioButtonListBox" TargetType="{x:Type ListBox}"> 
		<Setter Property="Background" Value="Transparent"/> 
		<Setter Property="ItemContainerStyle"> 
			<Setter.Value> 
				<Style TargetType="{x:Type ListBoxItem}" > 
					<Setter Property="Margin" Value="5" /> 
					<Setter Property="Template"> 
						<Setter.Value> 
							<ControlTemplate TargetType="{x:Type ListBoxItem}"> 
								<Border BorderThickness="0" Background="Transparent"> 
									<RadioButton  
										Focusable="False" 
										IsHitTestVisible="False" 
										IsChecked="{TemplateBinding IsSelected}"> 
										<ContentPresenter /> 
									</RadioButton> 
								</Border> 
							</ControlTemplate> 
						</Setter.Value> 
					</Setter> 
				</Style> 
			</Setter.Value> 
		</Setter> 
		<Setter Property="Control.Template"> 
			<Setter.Value> 
				<ControlTemplate TargetType="{x:Type ListBox}"> 
					<Border BorderThickness="0" Padding="0" BorderBrush="Transparent" Background="Transparent" Name="Bd" SnapsToDevicePixels="True"> 
						<ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" /> 
					</Border> 
				</ControlTemplate> 
			</Setter.Value> 
		</Setter> 
	</Style> 
	
	<!-- Style for a list of RadioButtons (horizontal) -->
	<Style x:Key="RadioButtonListBoxHorizontal" TargetType="{x:Type ListBox}" BasedOn="{StaticResource RadioButtonListBox}"> 
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<UniformGrid Rows="1"/>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
	</Style> 
	
	<!-- Style for a list of RadioButtons (vertical) -->
	<Style x:Key="RadioButtonListBoxVertical" TargetType="{x:Type ListBox}" BasedOn="{StaticResource RadioButtonListBox}"> 
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<UniformGrid Columns="1"/>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
	</Style> 
	
	<!-- Style for a panel witch contains a view model property -->
	<Style x:Key="PropertyPanel">
		<Setter Property="Control.Background" Value="LightBlue"/> <!-- Remove comment for debug view-->
		<Style.Triggers>
			<Trigger Property="ComponentModel:DesignerProperties.IsInDesignMode" Value="False">
				<Setter Property="Control.Background" Value="Transparent"/>
			</Trigger>
			<!--NOT WORKING! DataTrigger Binding="{Binding Control.DataContext, RelativeSource={RelativeSource Self}, Converter={x:Static Converters:SpecialBooleanConverter.IsNull}}" Value="True">
				<Setter Property="Control.Background" Value="Red"/>
			</DataTrigger-->
			<DataTrigger Binding="{Binding}" Value="{x:Null}">
				<Setter Property="Control.Background" Value="Red"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>
</ResourceDictionary>