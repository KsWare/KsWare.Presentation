using System;
using System.Diagnostics;


namespace KsWare.Presentation.ViewModelFramework {

	public partial class ObjectVM {

		private Lazy<BackingFieldsStore> _lazyFields;

		private void InitPartFields() {
			_lazyFields=new Lazy<BackingFieldsStore>(()=>new BackingFieldsStore(this,OnPropertyChanged));
		}

		/// <summary>
		/// Gets the fields.
		/// </summary>
		/// <value>The fields.</value>
		/// <remarks>The "Fields" of a view-model are lightweight alternative compared to view-model properties a la ValueVM. 
		/// These Fields are raising PropertyChanged and are observable.
		/// <para>The Fields is a lazy BackingFieldsStore, so if Fields is not accesses, no memory is used.</para>
		/// </remarks>
		/// <example>
		/// Create property accessor
		/// <code language="C#">
		/// public bool MyBool { get =&gt; Fields.GetValue&lt;bool&gt;(); set =&gt; Fields.SetValue(value); }
		/// </code>
		/// </example>
		/// <example>
		/// Observe a Field
		/// <code language="C#">
		/// Fields[nameof(MyBool)].ValueChangedEvent.add = (sender, e) =&gt; {
		///		Debug.WriteLine($"ByBool changed: {e.NewValue}");
		/// };
		/// </code>
		/// </example>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public BackingFieldsStore Fields => _lazyFields.Value;

		/// <summary>
		/// [Debug] Gets the BackingFieldsStore without creating it if not existss.
		/// </summary>
		/// <value>The BackingFieldsStore or null if not created.</value>
		/// <autogeneratedoc />
		public BackingFieldsStore FieldsːDebug => _lazyFields.IsValueCreated ? _lazyFields.Value : null;

		
	}

}
