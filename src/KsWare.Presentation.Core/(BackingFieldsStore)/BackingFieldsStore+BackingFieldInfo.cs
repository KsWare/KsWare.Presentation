using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;

namespace KsWare.Presentation {

	public sealed partial class BackingFieldsStore {

		public interface IBackingFieldInfo:INotifyPropertyChanged {

			/// <summary>
			/// Gets the name.
			/// </summary>
			/// <value>The name.</value>
			/// <autogeneratedoc />
			string Name { get; }

			/// <summary>
			/// Gets the type.
			/// </summary>
			/// <value>The type.</value>
			/// <autogeneratedoc />
			Type Type { get; }

			/// <summary>
			/// Gets or sets the value.
			/// </summary>
			/// <value>The value.</value>
			/// <returns>Manual setting the value will not raise a NotifyPropertyChanged event. Use <see cref="SetValue"/> instead.</returns>
			object Value { get; set; }

			/// <summary>
			/// Gets the value changed event.
			/// </summary>
			/// <value>The value changed event.</value>
			/// <autogeneratedoc />
			IEventSource<EventHandler<ValueChangedEventArgs>> ValueChangedEvent { get; }

			/// <summary>
			/// Occurs when value changed.
			/// </summary>
			event EventHandler<ValueChangedEventArgs> ValueChanged;
		}

		internal sealed class BackingFieldInfo:IDisposable, IBackingFieldInfo {

			internal Lazy<EventSourceStore> LazyWeakEventProperties;
			internal List<EventHandlerInfo> EventHandlers = new List<EventHandlerInfo>();
			private WeakReference<BackingFieldsStore> _weakOwner;
			private object _value;

			internal BackingFieldInfo(string name, Type type, BackingFieldsStore owner) {
				Name = name;
				Type = type;
				_weakOwner = new WeakReference<BackingFieldsStore>(owner);
				LazyWeakEventProperties = new Lazy<EventSourceStore>(() => new EventSourceStore(this));
			}

			internal BackingFieldInfo(string name, Type type, object value, BackingFieldsStore owner) {
				Name                    = name;
				Type                    = type;
				_weakOwner              = new WeakReference<BackingFieldsStore>(owner);
				LazyWeakEventProperties = new Lazy<EventSourceStore>(() => new EventSourceStore(this));
				_value = value;
			}

			/// <summary>
			/// Gets the name.
			/// </summary>
			/// <value>The name.</value>
			/// <autogeneratedoc />
			public string Name { get; }

			/// <summary>
			/// Gets the type.
			/// </summary>
			/// <value>The type.</value>
			/// <autogeneratedoc />
			public Type Type { get; }

			private BackingFieldsStore Owner => _weakOwner.TryGetTarget(out var owner) ? owner : null;

//			public object DefaultValue { get; set; }

//			public bool CanWrite { get; set; }

			/// <summary>
			/// Gets or sets the value.
			/// </summary>
			/// <value>The value.</value>
			public object Value { get => _value; set => Owner.SetValueInternal(this, value, _value); }

			/// <summary> [SPECIAL] called by BackingFieldStore
			/// </summary>
			internal bool SetValue(BackingFieldsStore sender, object value) {
				const bool bChanged    = true; const bool bNotChanged = false;
				if (Equals(_value, value)) return bNotChanged;
				_value = value;
				OnPropertyChanged(nameof(Value));
				return bChanged;
			}

			/// <summary>
			/// Occurs when value changed.
			/// </summary>
			public event EventHandler<ValueChangedEventArgs> ValueChanged {
				add {
					lock (EventHandlers) {
						EventHandlers.Add(new EventHandlerInfo(this, value));
					}
				}
				remove {
					lock (EventHandlers) {
						var item = EventHandlers.First(x => x.PropertyChangedEventHandler == value);
						item.Dispose();
					}
				}
			}

			/// <summary>
			/// Gets the value changed event.
			/// </summary>
			/// <value>The value changed event.</value>
			/// <autogeneratedoc />
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			public IEventSource<EventHandler<ValueChangedEventArgs>> ValueChangedEvent => LazyWeakEventProperties.Value.Get<EventHandler<ValueChangedEventArgs>>("ValueChangedEvent");

			public void Dispose() {
				foreach (var eventHandlerInfo in EventHandlers) eventHandlerInfo.Dispose();
				EventHandlers = null;
				if (LazyWeakEventProperties.IsValueCreated) LazyWeakEventProperties.Value.Dispose();
				LazyWeakEventProperties = null;
				_weakOwner = null;
			}

			public event PropertyChangedEventHandler PropertyChanged;

			[NotifyPropertyChangedInvocator]
			private void OnPropertyChanged([CallerMemberName] string propertyName = null) {
				PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

}